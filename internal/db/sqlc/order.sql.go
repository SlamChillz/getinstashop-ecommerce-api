// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: order.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const cancelOrder = `-- name: CancelOrder :one
UPDATE "order"
SET
    status = 'CANCELLED',
    updated_at = NOW()
WHERE id = $1 AND "userId" = $2 AND status = 'PENDING'
RETURNING id, "userId", total, status, "createdAt", "updatedAt"
`

type CancelOrderParams struct {
	ID     uuid.UUID `json:"id"`
	UserId uuid.UUID `json:"userId"`
}

func (q *Queries) CancelOrder(ctx context.Context, arg CancelOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, cancelOrder, arg.ID, arg.UserId)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserId,
		&i.Total,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO "order" (
    id,
    "userId",
    total
) VALUES (
    $1, $2, $3
) RETURNING id, "userId", total, status, "createdAt", "updatedAt"
`

type CreateOrderParams struct {
	ID     uuid.UUID `json:"id"`
	UserId uuid.UUID `json:"userId"`
	Total  float64   `json:"total"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder, arg.ID, arg.UserId, arg.Total)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserId,
		&i.Total,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllOrderByUserId = `-- name: GetAllOrderByUserId :many
SELECT id, "userId", total, status, "createdAt", "updatedAt" FROM "order"
WHERE "userId" = $1
`

func (q *Queries) GetAllOrderByUserId(ctx context.Context, userid uuid.UUID) ([]Order, error) {
	rows, err := q.db.Query(ctx, getAllOrderByUserId, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserId,
			&i.Total,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllOrderItem = `-- name: GetAllOrderItem :many
SELECT id, "orderId", "productId", quantity, price, "createdAt", "updatedAt" FROM "orderItem"
WHERE "orderId" = $1
`

func (q *Queries) GetAllOrderItem(ctx context.Context, orderid uuid.UUID) ([]OrderItem, error) {
	rows, err := q.db.Query(ctx, getAllOrderItem, orderid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderItem{}
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderId,
			&i.ProductId,
			&i.Quantity,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllProductInOrder = `-- name: GetAllProductInOrder :many
SELECT "orderItem"."productId", "orderItem"."quantity" FROM "orderItem" WHERE "orderId" = $1
`

type GetAllProductInOrderRow struct {
	ProductId uuid.UUID `json:"productId"`
	Quantity  int32     `json:"quantity"`
}

func (q *Queries) GetAllProductInOrder(ctx context.Context, orderid uuid.UUID) ([]GetAllProductInOrderRow, error) {
	rows, err := q.db.Query(ctx, getAllProductInOrder, orderid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllProductInOrderRow{}
	for rows.Next() {
		var i GetAllProductInOrderRow
		if err := rows.Scan(&i.ProductId, &i.Quantity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderById = `-- name: GetOrderById :one
SELECT id, "userId", total, status, "createdAt", "updatedAt" FROM "order"
WHERE id = $1
`

func (q *Queries) GetOrderById(ctx context.Context, id uuid.UUID) (Order, error) {
	row := q.db.QueryRow(ctx, getOrderById, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserId,
		&i.Total,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE "order"
SET
    status = $1,
    updated_at = NOW()
WHERE id = $2
RETURNING id, "userId", total, status, "createdAt", "updatedAt"
`

type UpdateOrderStatusParams struct {
	Status OrderStatus `json:"status"`
	ID     uuid.UUID   `json:"id"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrderStatus, arg.Status, arg.ID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserId,
		&i.Total,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
