// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createAdminUser = `-- name: CreateAdminUser :one
INSERT INTO "user" (
    id,
    email,
    password,
    admin
) VALUES (
    $1, $2, $3, true
) RETURNING id, email, password, admin, "createdAt", "updatedAt"
`

type CreateAdminUserParams struct {
	ID       uuid.UUID `json:"id"`
	Email    string    `json:"email"`
	Password string    `json:"password"`
}

func (q *Queries) CreateAdminUser(ctx context.Context, arg CreateAdminUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createAdminUser, arg.ID, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Admin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (
    id,
    email,
    password
) VALUES (
    $1, $2, $3
) RETURNING id, email, password, admin, "createdAt", "updatedAt"
`

type CreateUserParams struct {
	ID       uuid.UUID `json:"id"`
	Email    string    `json:"email"`
	Password string    `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.ID, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Admin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, password, admin
FROM "user"
WHERE email = $1 LIMIT 1
`

type GetUserByIdRow struct {
	ID       uuid.UUID `json:"id"`
	Email    string    `json:"email"`
	Password string    `json:"password"`
	Admin    bool      `json:"admin"`
}

func (q *Queries) GetUserById(ctx context.Context, email string) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, email)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Admin,
	)
	return i, err
}
