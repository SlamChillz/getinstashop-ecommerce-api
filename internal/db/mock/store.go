// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/slamchillz/getinstashop-ecommerce-api/internal/db/sqlc (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination internal/db/mock/store.go github.com/slamchillz/getinstashop-ecommerce-api/internal/db/sqlc Store
//

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	db "github.com/slamchillz/getinstashop-ecommerce-api/internal/db/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CancelOrder mocks base method.
func (m *MockStore) CancelOrder(ctx context.Context, arg db.CancelOrderParams) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrder", ctx, arg)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *MockStoreMockRecorder) CancelOrder(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockStore)(nil).CancelOrder), ctx, arg)
}

// CreateAdminUser mocks base method.
func (m *MockStore) CreateAdminUser(ctx context.Context, arg db.CreateAdminUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdminUser", ctx, arg)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdminUser indicates an expected call of CreateAdminUser.
func (mr *MockStoreMockRecorder) CreateAdminUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdminUser", reflect.TypeOf((*MockStore)(nil).CreateAdminUser), ctx, arg)
}

// CreateOrder mocks base method.
func (m *MockStore) CreateOrder(ctx context.Context, arg db.CreateOrderParams) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, arg)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockStoreMockRecorder) CreateOrder(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockStore)(nil).CreateOrder), ctx, arg)
}

// CreateOrderTx mocks base method.
func (m *MockStore) CreateOrderTx(ctx context.Context, arg db.CreateOrderTxParams) (db.Order, map[string]string, error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderTx", ctx, arg)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(map[string]string)
	ret2, _ := ret[2].(error)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// CreateOrderTx indicates an expected call of CreateOrderTx.
func (mr *MockStoreMockRecorder) CreateOrderTx(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderTx", reflect.TypeOf((*MockStore)(nil).CreateOrderTx), ctx, arg)
}

// CreateProduct mocks base method.
func (m *MockStore) CreateProduct(ctx context.Context, arg db.CreateProductParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, arg)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockStoreMockRecorder) CreateProduct(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockStore)(nil).CreateProduct), ctx, arg)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(ctx context.Context, arg db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), ctx, arg)
}

// DeleteOneProduct mocks base method.
func (m *MockStore) DeleteOneProduct(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOneProduct", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOneProduct indicates an expected call of DeleteOneProduct.
func (mr *MockStoreMockRecorder) DeleteOneProduct(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOneProduct", reflect.TypeOf((*MockStore)(nil).DeleteOneProduct), ctx, id)
}

// GetAllOrderByUserId mocks base method.
func (m *MockStore) GetAllOrderByUserId(ctx context.Context, userid uuid.UUID) ([]db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrderByUserId", ctx, userid)
	ret0, _ := ret[0].([]db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrderByUserId indicates an expected call of GetAllOrderByUserId.
func (mr *MockStoreMockRecorder) GetAllOrderByUserId(ctx, userid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrderByUserId", reflect.TypeOf((*MockStore)(nil).GetAllOrderByUserId), ctx, userid)
}

// GetAllOrderItem mocks base method.
func (m *MockStore) GetAllOrderItem(ctx context.Context, orderid uuid.UUID) ([]db.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrderItem", ctx, orderid)
	ret0, _ := ret[0].([]db.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrderItem indicates an expected call of GetAllOrderItem.
func (mr *MockStoreMockRecorder) GetAllOrderItem(ctx, orderid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrderItem", reflect.TypeOf((*MockStore)(nil).GetAllOrderItem), ctx, orderid)
}

// GetAllProduct mocks base method.
func (m *MockStore) GetAllProduct(ctx context.Context) ([]db.GetAllProductRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProduct", ctx)
	ret0, _ := ret[0].([]db.GetAllProductRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProduct indicates an expected call of GetAllProduct.
func (mr *MockStoreMockRecorder) GetAllProduct(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProduct", reflect.TypeOf((*MockStore)(nil).GetAllProduct), ctx)
}

// GetAllProductInOrder mocks base method.
func (m *MockStore) GetAllProductInOrder(ctx context.Context, orderid uuid.UUID) ([]db.GetAllProductInOrderRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProductInOrder", ctx, orderid)
	ret0, _ := ret[0].([]db.GetAllProductInOrderRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProductInOrder indicates an expected call of GetAllProductInOrder.
func (mr *MockStoreMockRecorder) GetAllProductInOrder(ctx, orderid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProductInOrder", reflect.TypeOf((*MockStore)(nil).GetAllProductInOrder), ctx, orderid)
}

// GetMultipleProductById mocks base method.
func (m *MockStore) GetMultipleProductById(ctx context.Context, dollar_1 []uuid.UUID) ([]db.GetMultipleProductByIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMultipleProductById", ctx, dollar_1)
	ret0, _ := ret[0].([]db.GetMultipleProductByIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMultipleProductById indicates an expected call of GetMultipleProductById.
func (mr *MockStoreMockRecorder) GetMultipleProductById(ctx, dollar_1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultipleProductById", reflect.TypeOf((*MockStore)(nil).GetMultipleProductById), ctx, dollar_1)
}

// GetOneProduct mocks base method.
func (m *MockStore) GetOneProduct(ctx context.Context, id uuid.UUID) (db.GetOneProductRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneProduct", ctx, id)
	ret0, _ := ret[0].(db.GetOneProductRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneProduct indicates an expected call of GetOneProduct.
func (mr *MockStoreMockRecorder) GetOneProduct(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneProduct", reflect.TypeOf((*MockStore)(nil).GetOneProduct), ctx, id)
}

// GetOrderById mocks base method.
func (m *MockStore) GetOrderById(ctx context.Context, id uuid.UUID) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderById", ctx, id)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderById indicates an expected call of GetOrderById.
func (mr *MockStoreMockRecorder) GetOrderById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderById", reflect.TypeOf((*MockStore)(nil).GetOrderById), ctx, id)
}

// GetUserById mocks base method.
func (m *MockStore) GetUserById(ctx context.Context, email string) (db.GetUserByIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", ctx, email)
	ret0, _ := ret[0].(db.GetUserByIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockStoreMockRecorder) GetUserById(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockStore)(nil).GetUserById), ctx, email)
}

// UpdateOneProduct mocks base method.
func (m *MockStore) UpdateOneProduct(ctx context.Context, arg db.UpdateOneProductParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOneProduct", ctx, arg)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOneProduct indicates an expected call of UpdateOneProduct.
func (mr *MockStoreMockRecorder) UpdateOneProduct(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOneProduct", reflect.TypeOf((*MockStore)(nil).UpdateOneProduct), ctx, arg)
}

// UpdateOrderStatus mocks base method.
func (m *MockStore) UpdateOrderStatus(ctx context.Context, arg db.UpdateOrderStatusParams) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, arg)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockStoreMockRecorder) UpdateOrderStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockStore)(nil).UpdateOrderStatus), ctx, arg)
}

// UpdateOrderTx mocks base method.
func (m *MockStore) UpdateOrderTx(ctx context.Context, arg db.UpdateOrderTxParams) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderTx", ctx, arg)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderTx indicates an expected call of UpdateOrderTx.
func (mr *MockStoreMockRecorder) UpdateOrderTx(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderTx", reflect.TypeOf((*MockStore)(nil).UpdateOrderTx), ctx, arg)
}

// UpdateProductStock mocks base method.
func (m *MockStore) UpdateProductStock(ctx context.Context, arg db.UpdateProductStockParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductStock", ctx, arg)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductStock indicates an expected call of UpdateProductStock.
func (mr *MockStoreMockRecorder) UpdateProductStock(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductStock", reflect.TypeOf((*MockStore)(nil).UpdateProductStock), ctx, arg)
}

// UpdateProductTx mocks base method.
func (m *MockStore) UpdateProductTx(ctx context.Context, arg db.UpdateProductTxParams) (db.Product, error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductTx", ctx, arg)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateProductTx indicates an expected call of UpdateProductTx.
func (mr *MockStoreMockRecorder) UpdateProductTx(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductTx", reflect.TypeOf((*MockStore)(nil).UpdateProductTx), ctx, arg)
}
